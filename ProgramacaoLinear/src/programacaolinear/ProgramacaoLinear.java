package programacaolinear;

import java.util.ArrayList;
import java.util.Arrays;

/**
 * JFrame principal que serve de interface para o usuário inserir os dados da programação linear a duas variáveis.<br>
 * <p>Resolve e devolve as soluções ótimas, gera gráficos e testa pares ordenados.<br>
 * O teste permite saber se um par ordenado qualquer passa em todas as restrições, e caso sim, qual o resultado.</p>
 * <p>Função objetivo — Modelo: Ax + By + K = Objetivo.
 * Restrições — Modelo: ax + by = c</p>
 * <p style="text-align:center"><b>Operadores relacionais:</b></p>
 * <p>Use "=", "&gt;=", "&lt;=".</p>
 * <p>Para "&gt;" e "&lt;", use artifícios com "&gt;=" e "&lt;=".</p>
 * <p>Caso gerando gráficos ou testando pares ordenados, pode-se usar "&gt;", "&lt;" ou ("&lt;&gt;" ou "!=").</p>
 * 
 * @author Lucas Paz
 */
public class ProgramacaoLinear extends javax.swing.JFrame {

    private double resultadoFinal=0;
    /**
     * Creates new form ProgramacaoLinear
     */
    public ProgramacaoLinear() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupMinMax = new javax.swing.ButtonGroup();
        jPanelFuncaoObjetivo = new javax.swing.JPanel();
        jTextFieldA = new javax.swing.JTextField();
        jTextFieldB = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jRadioButtonMin = new javax.swing.JRadioButton();
        jRadioButtonMax = new javax.swing.JRadioButton();
        jTextFieldK = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanelRestricoes = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRestricoes = new javax.swing.JTable();
        jSpinnerRestricoes = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButtonTestarParOrdenado = new javax.swing.JButton();
        jTextFieldX = new javax.swing.JTextField();
        jTextFieldY = new javax.swing.JTextField();
        jButtonResolver = new javax.swing.JButton();
        jButtonGrafico = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Programação Linear");
        setMinimumSize(null);
        setPreferredSize(new java.awt.Dimension(600, 500));
        setResizable(false);
        setSize(600, 500);
        getContentPane().setLayout(null);

        jPanelFuncaoObjetivo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Função objetivo — Modelo: Ax + By + K = Objetivo", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanelFuncaoObjetivo.setLayout(null);

        jTextFieldA.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldA.setText("1");
        jTextFieldA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jPanelFuncaoObjetivo.add(jTextFieldA);
        jTextFieldA.setBounds(10, 50, 80, 30);

        jTextFieldB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldB.setText("1");
        jTextFieldB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jPanelFuncaoObjetivo.add(jTextFieldB);
        jTextFieldB.setBounds(120, 50, 80, 30);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("*y + ");
        jPanelFuncaoObjetivo.add(jLabel2);
        jLabel2.setBounds(200, 50, 30, 30);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("B");
        jPanelFuncaoObjetivo.add(jLabel3);
        jLabel3.setBounds(120, 20, 80, 30);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("A");
        jPanelFuncaoObjetivo.add(jLabel8);
        jLabel8.setBounds(10, 20, 80, 30);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("*x +");
        jPanelFuncaoObjetivo.add(jLabel9);
        jLabel9.setBounds(90, 50, 30, 30);

        buttonGroupMinMax.add(jRadioButtonMin);
        jRadioButtonMin.setText("Minimizar");
        jPanelFuncaoObjetivo.add(jRadioButtonMin);
        jRadioButtonMin.setBounds(120, 90, 90, 23);

        buttonGroupMinMax.add(jRadioButtonMax);
        jRadioButtonMax.setSelected(true);
        jRadioButtonMax.setText("Maximizar");
        jPanelFuncaoObjetivo.add(jRadioButtonMax);
        jRadioButtonMax.setBounds(230, 90, 110, 23);

        jTextFieldK.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldK.setText("0");
        jTextFieldK.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jPanelFuncaoObjetivo.add(jTextFieldK);
        jTextFieldK.setBounds(230, 50, 80, 30);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("K");
        jPanelFuncaoObjetivo.add(jLabel4);
        jLabel4.setBounds(230, 20, 80, 30);

        jLabel10.setText(" = Objetivo");
        jPanelFuncaoObjetivo.add(jLabel10);
        jLabel10.setBounds(310, 50, 70, 30);

        getContentPane().add(jPanelFuncaoObjetivo);
        jPanelFuncaoObjetivo.setBounds(10, 50, 390, 130);

        jPanelRestricoes.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Restrições", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanelRestricoes.setLayout(null);

        jTableRestricoes.setModel(defaultTableModelRestricoes);
        jTableRestricoes.setCellSelectionEnabled(true);
        jTableRestricoes.setDragEnabled(true);
        jTableRestricoes.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTableRestricoes.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableRestricoes);

        jPanelRestricoes.add(jScrollPane1);
        jScrollPane1.setBounds(16, 67, 190, 200);

        jSpinnerRestricoes.setModel(new javax.swing.SpinnerNumberModel(2, 2, 100, 1));
        jSpinnerRestricoes.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerRestricoesStateChanged(evt);
            }
        });
        jPanelRestricoes.add(jSpinnerRestricoes);
        jSpinnerRestricoes.setBounds(224, 67, 49, 30);

        jLabel5.setText("Número de restrições");
        jPanelRestricoes.add(jLabel5);
        jLabel5.setBounds(224, 27, 120, 30);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("<html> <p style=\"text-align:center\"><b>Operadores relacionais:</b></p><br> <p>Use \"=\", \">=\", \"&lt;=\".</p><br> <p>Para \">\" e \"&lt;\", use artifícios com \">=\" e \"&lt;=\".</p><br> <p>Caso gerando gráficos ou testando pares ordenados, pode-se usar \">\", \"&lt;\" ou (\"&lt;>\" ou \"!=\").</p> </html>");
        jLabel6.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanelRestricoes.add(jLabel6);
        jLabel6.setBounds(340, 30, 230, 170);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Restrições — Modelo: ax + by = c");
        jPanelRestricoes.add(jLabel7);
        jLabel7.setBounds(16, 27, 190, 30);

        jButtonTestarParOrdenado.setText("Testar par ordenado");
        jButtonTestarParOrdenado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTestarParOrdenadoActionPerformed(evt);
            }
        });
        jPanelRestricoes.add(jButtonTestarParOrdenado);
        jButtonTestarParOrdenado.setBounds(220, 230, 160, 30);

        jTextFieldX.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldX.setText("x");
        jTextFieldX.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jPanelRestricoes.add(jTextFieldX);
        jTextFieldX.setBounds(390, 230, 80, 30);

        jTextFieldY.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldY.setText("y");
        jTextFieldY.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldFocusGained(evt);
            }
        });
        jPanelRestricoes.add(jTextFieldY);
        jTextFieldY.setBounds(480, 230, 80, 30);

        getContentPane().add(jPanelRestricoes);
        jPanelRestricoes.setBounds(10, 190, 580, 280);

        jButtonResolver.setText("Resolver");
        jButtonResolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResolverActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonResolver);
        jButtonResolver.setBounds(420, 50, 160, 30);

        jButtonGrafico.setText("Gráfico");
        jButtonGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGraficoActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonGrafico);
        jButtonGrafico.setBounds(420, 100, 160, 30);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jSpinnerRestricoesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerRestricoesStateChanged
        // TODO add your handling code here:
        defaultTableModelRestricoes.setRowCount((int)jSpinnerRestricoes.getValue());
    }//GEN-LAST:event_jSpinnerRestricoesStateChanged

    private void jButtonResolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResolverActionPerformed
        // TODO add your handling code here:
        resolver();
    }//GEN-LAST:event_jButtonResolverActionPerformed

    private void jTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldFocusGained
        // TODO add your handling code here:
        javax.swing.JTextField jTextField = (javax.swing.JTextField) evt.getComponent();
        jTextField.setSelectionStart(0);
        jTextField.setSelectionEnd(jTextField.getText().length());
    }//GEN-LAST:event_jTextFieldFocusGained

    private void jButtonGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGraficoActionPerformed
        // TODO add your handling code here:

        if (preValidacao("grafico") == true) {
            planocartesiano.JFrameMenu jFrameMenu = new planocartesiano.JFrameMenu(obterEquacoes());
            jFrameMenu.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            jFrameMenu.setVisible(true);
        }

    }//GEN-LAST:event_jButtonGraficoActionPerformed

    private void jButtonTestarParOrdenadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestarParOrdenadoActionPerformed
        // TODO add your handling code here:

        if (preValidacao("testar") == true) {
            try {
                double x = Double.valueOf(jTextFieldX.getText());
                double y = Double.valueOf(jTextFieldY.getText());
                boolean satisfezAsRestricoes = testarParOrdenado(x,y);

                if (satisfezAsRestricoes == true) {
                    double a = Double.valueOf(jTextFieldA.getText());
                    double b = Double.valueOf(jTextFieldB.getText());
                    double k = Double.valueOf(jTextFieldK.getText());
                    double resultado = a*x + b*y + k;
                    javax.swing.JOptionPane.showMessageDialog(null, "O par ordenado ("+ x + " , " + y + ") satisfez todas as restrições.\nResultado = " + resultado +".", "Programação Linear", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                } else {
                    javax.swing.JOptionPane.showMessageDialog(null, "O par ordenado ("+ x + " , " + y + ") não satisfez todas as restrições.", "Programação Linear", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
            } catch(java.awt.HeadlessException | NumberFormatException e) {
                javax.swing.JOptionPane.showMessageDialog(null, "Digite corretamente os dados." , "Erro", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

        }

    }//GEN-LAST:event_jButtonTestarParOrdenadoActionPerformed

    private void resolver() {

        if (preValidacao("resolver") == true) {
            
            ArrayList<Double[]> paresOrdenadosIniciais = acharParesOrdenadosIniciais();

            if (paresOrdenadosIniciais.size() > 0) {
                
                ArrayList<Double[]> verticesAprovados = testarParesOrdenadosIniciaisNasRestricoes(paresOrdenadosIniciais);
                
                if (verticesAprovados.size() > 0) {
                    
                    ArrayList<Double[]> verticesOtimos = encontrarVerticesOtimos(verticesAprovados);
                    
                        switch (verticesOtimos.size()) {
                            case 0:
                                javax.swing.JOptionPane.showMessageDialog(null, "Não houve solução." , "Programação Linear", javax.swing.JOptionPane.WARNING_MESSAGE);
                                break;
                            case 1:
                                double x = verticesOtimos.get(0)[0];
                                double y = verticesOtimos.get(0)[1];

                                javax.swing.JOptionPane.showMessageDialog(null, "Solução (x , y) = (" + x + " , " + y + ")\nResultado = " + resultadoFinal, "Programação Linear", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                break;
                            default: // > 1
                                String solucoes = solucoesToString(verticesOtimos);

                                javax.swing.JOptionPane.showMessageDialog(null, "Mais de uma solução ótima. Soluções (x , y) = {" + solucoes + "}\nResultado = " + resultadoFinal, "Programação Linear", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                break;
                        }
                } else {
                    javax.swing.JOptionPane.showMessageDialog(null, "Não houve vértices que satisfizessem todas as restrições, sistema insolúvel." , "Programação Linear", javax.swing.JOptionPane.WARNING_MESSAGE);
                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Não houve vértices adequados, sistema insolúvel." , "Programação Linear", javax.swing.JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    private boolean preValidacao(String resolverOuGraficoOuTestar) {
        //parametro seja "resolver", "grafico" ou "testar".
        try {
            if (jTextFieldA.getText().length()<=0 || jTextFieldB.getText().length()<=0 
                    || (Double.valueOf(jTextFieldA.getText()) == 0d && Double.valueOf(jTextFieldB.getText()) == 0d)) {
                javax.swing.JOptionPane.showMessageDialog(null, "Digite corretamente os dados da função objetivo: \"A*x + B*y + K = Objetivo\".\nImpossível: A e B = 0 juntos." , "Erro", javax.swing.JOptionPane.ERROR_MESSAGE);
                return false;
            } else if (Double.valueOf(jTextFieldK.getText()) == null) {
                javax.swing.JOptionPane.showMessageDialog(null, "Preencha corretamente todos os dados." , "Erro", javax.swing.JOptionPane.ERROR_MESSAGE);
                return false;
            }

            for (int linha = 0; linha < defaultTableModelRestricoes.getRowCount(); linha++) {

                String operador = defaultTableModelRestricoes.getValueAt(linha, 2).toString().replaceAll(" ", "");
                
                if (defaultTableModelRestricoes.getValueAt(linha, 0) == null || defaultTableModelRestricoes.getValueAt(linha, 1) == null
                        || defaultTableModelRestricoes.getValueAt(linha, 2) == null || defaultTableModelRestricoes.getValueAt(linha, 3) == null) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Preencha corretamente todos os dados." , "Erro", javax.swing.JOptionPane.ERROR_MESSAGE);
                    return false;

                } else if (Double.valueOf(defaultTableModelRestricoes.getValueAt(linha, 0).toString()) == 0d && Double.valueOf(defaultTableModelRestricoes.getValueAt(linha, 1).toString()) == 0d) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Digite corretamente os dados. Impossível: a e b = 0 juntos." , "Erro", javax.swing.JOptionPane.ERROR_MESSAGE);
                    return false;

                } else if (! (">=".equals(operador) || "<=".equals(operador) || "=".equals(operador) 
                        || "<>".equals(operador) || "!=".equals(operador) || ">".equals(operador) || "<".equals(operador))) {
                        javax.swing.JOptionPane.showMessageDialog(null, "Para resolver, use \">=\", \"<=\" ou \"=\" como operadores relacionais.\nCaso testando ou gerando gráficos, pode-se também usar \">\", \"<\" ou (\"<>\" ou \"!=\")." , "Erro", javax.swing.JOptionPane.ERROR_MESSAGE);
                        return false;

                } else if (resolverOuGraficoOuTestar.trim().equalsIgnoreCase("resolver") && !(">=".equals(operador) || "<=".equals(operador) || "=".equals(operador))){
                        javax.swing.JOptionPane.showMessageDialog(null, "Para resolver, use \">=\", \"<=\" ou \"=\" como operadores relacionais.\nApenas quando testando ou gerando gráficos, pode-se também usar \">\", \"<\" ou (\"<>\" ou \"!=\")." , "Erro", javax.swing.JOptionPane.ERROR_MESSAGE);
                        return false;
                }
            }
        } catch (java.awt.HeadlessException | NumberFormatException erro) {
                javax.swing.JOptionPane.showMessageDialog(null, "Digite corretamente os dados." , "Erro", javax.swing.JOptionPane.ERROR_MESSAGE);
                return false;
        }

        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProgramacaoLinear.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ProgramacaoLinear().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupMinMax;
    private javax.swing.JButton jButtonGrafico;
    private javax.swing.JButton jButtonResolver;
    private javax.swing.JButton jButtonTestarParOrdenado;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanelFuncaoObjetivo;
    private javax.swing.JPanel jPanelRestricoes;
    private javax.swing.JRadioButton jRadioButtonMax;
    private javax.swing.JRadioButton jRadioButtonMin;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerRestricoes;
    javax.swing.table.DefaultTableModel defaultTableModelRestricoes = new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {0, 0, ">=", 0},
            {0, 0, "<=", 0}
        },
        new String [] {"a", "b", "<>=", "c"})
    {
        Class[] types = new Class [] {
            java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.Double.class
        };
        public Class getColumnClass(int columnIndex) {return types [columnIndex];}
    };
    private javax.swing.JTable jTableRestricoes;
    private javax.swing.JTextField jTextFieldA;
    private javax.swing.JTextField jTextFieldB;
    private javax.swing.JTextField jTextFieldK;
    private javax.swing.JTextField jTextFieldX;
    private javax.swing.JTextField jTextFieldY;
    // End of variables declaration//GEN-END:variables

    private ArrayList<Double[]> acharParesOrdenadosIniciais() {
        ArrayList<Double[]> paresOrdenadosIniciais = new ArrayList();

        for (int linhaAntes = 0; linhaAntes < defaultTableModelRestricoes.getRowCount()-1; linhaAntes++) {

            if (defaultTableModelRestricoes.getValueAt(linhaAntes, 2).toString().replaceAll(" ", "").equals("<>")
                    || defaultTableModelRestricoes.getValueAt(linhaAntes, 2).toString().replaceAll(" ", "").equals("!=")) {
                continue;
            }
            
            for (int linhaDepois = linhaAntes+1; linhaDepois < defaultTableModelRestricoes.getRowCount(); linhaDepois++) {

                if (defaultTableModelRestricoes.getValueAt(linhaDepois, 2).toString().replaceAll(" ", "").equals("<>") 
                        || defaultTableModelRestricoes.getValueAt(linhaDepois, 2).toString().replaceAll(" ", "").equals("!=")) {
                    continue;
                }
                
                double a0 = Double.valueOf(defaultTableModelRestricoes.getValueAt(linhaAntes, 0).toString());
                double b0 = Double.valueOf(defaultTableModelRestricoes.getValueAt(linhaAntes, 1).toString());
                double c0 = Double.valueOf(defaultTableModelRestricoes.getValueAt(linhaAntes, 3).toString());
                double a1 = Double.valueOf(defaultTableModelRestricoes.getValueAt(linhaDepois, 0).toString());
                double b1 = Double.valueOf(defaultTableModelRestricoes.getValueAt(linhaDepois, 1).toString());
                double c1 = Double.valueOf(defaultTableModelRestricoes.getValueAt(linhaDepois, 3).toString());
                double determinante = a0*b1 - a1*b0;
                
                if (determinante == 0) continue;
                
                double x = (c0*b1 - c1*b0)/determinante;
                double y = (a0*c1 - a1*c0)/determinante;

                paresOrdenadosIniciais.add(new Double[] {x,y});
            }
        }

        return paresOrdenadosIniciais;
    }

    private ArrayList<Double[]> testarParesOrdenadosIniciaisNasRestricoes(ArrayList<Double[]> paresOrdenadosIniciais) {
        ArrayList<Double[]> verticesAprovados = (ArrayList<Double[]>) paresOrdenadosIniciais.clone();

        for (int linha = 0; linha < defaultTableModelRestricoes.getRowCount(); linha++) {
            double a = Double.valueOf(defaultTableModelRestricoes.getValueAt(linha, 0).toString());
            double b = Double.valueOf(defaultTableModelRestricoes.getValueAt(linha, 1).toString());
            String operador = defaultTableModelRestricoes.getValueAt(linha, 2).toString().replaceAll(" ", "");
            double c = Double.valueOf(defaultTableModelRestricoes.getValueAt(linha, 3).toString());

            for (Double[] vertice : paresOrdenadosIniciais) {
                double x = vertice[0];
                double y = vertice[1];

                double resultado = a*x + b*y;

                switch (operador) {
                    case ">=":
                        if ( ! (resultado >= c) ) verticesAprovados.remove(vertice);
                        break;
                    case "<=":
                        if ( ! (resultado <= c) ) verticesAprovados.remove(vertice);
                        break;
                    case "=":
                        if ( ! (resultado == c) ) verticesAprovados.remove(vertice);
                        break;
                    case ">":
                        if ( ! (resultado > c) ) verticesAprovados.remove(vertice);
                        break;
                    case "<":
                        if ( ! (resultado < c) ) verticesAprovados.remove(vertice);
                        break;
                    case "<>": //<> e != são sinônimos
                    case "!=":
                        if ( ! (resultado != c) ) verticesAprovados.remove(vertice);
                        break;
                }
            }
        }

        return verticesAprovados;
    }

    private ArrayList<Double[]> encontrarVerticesOtimos(ArrayList<Double[]> verticesAprovados) {
        ArrayList<Double[]> verticesOtimos = new ArrayList();//pode haver mais de um vértice ótimo
        double menorResultado=0;
        double maiorResultado=0;

        for (int i = 0; i < verticesAprovados.size(); i++) {
            double x = verticesAprovados.get(i)[0];
            double y = verticesAprovados.get(i)[1];
            double a = Double.valueOf(jTextFieldA.getText());
            double b = Double.valueOf(jTextFieldB.getText());
            double k = Double.valueOf(jTextFieldK.getText());
            double resultado = a*x + b*y + k;

            if (jRadioButtonMin.isSelected()) {
                if (resultado < menorResultado || i == 0) {
                    menorResultado = resultado;
                    resultadoFinal = resultado;
                    verticesOtimos.removeAll(verticesOtimos);
                    verticesOtimos.add(new Double[]{x,y});
                } else if (resultado == menorResultado) {
                    verticesOtimos.add(new Double[]{x,y});
                }
            } else if (jRadioButtonMax.isSelected()) {
                if (resultado > maiorResultado || i == 0) {
                    maiorResultado = resultado;
                    resultadoFinal = resultado;
                    verticesOtimos.removeAll(verticesOtimos);
                    verticesOtimos.add(new Double[]{x,y});
                } else if (resultado == maiorResultado){
                    verticesOtimos.add(new Double[]{x,y});
                }
            }
        }

        return verticesOtimos;
    }

    private String solucoesToString(ArrayList<Double[]> verticesOtimos) {
        String solucoes="";

        for (int i = 0; i < verticesOtimos.size(); i++) {
            String x = verticesOtimos.get(i)[0].toString();
            String y = verticesOtimos.get(i)[1].toString();
            solucoes += (i>0)? (", (" + x + " , " + y + ")") : ("(" + x + " , " + y + ")");
        }

        return solucoes;
    }

    private ArrayList<String> obterEquacoes() {
        ArrayList<String> equacoes = new ArrayList();

        for (int linha = 0; linha < jTableRestricoes.getRowCount(); linha++) {
            double a = Double.valueOf(defaultTableModelRestricoes.getValueAt(linha, 0).toString());
            double b = Double.valueOf(defaultTableModelRestricoes.getValueAt(linha, 1).toString());
            double c = Double.valueOf(defaultTableModelRestricoes.getValueAt(linha, 3).toString());            
            
            equacoes.add((b==0)? ("x=" + c/a) : ("(" + c + "-" + a + "*x)/" + b) );
        }

        return equacoes;
    }

    private boolean testarParOrdenado(Double x, Double y) {
        boolean satisfezAsRestricoes = false;

        try {
            if ((testarParesOrdenadosIniciaisNasRestricoes(new ArrayList<Double[]>(
                    Arrays.asList(new Double[][]{new Double[]{x,y}})))).size() == 1 
                    && Double.valueOf(jTextFieldX.getText()) != null 
                    && Double.valueOf(jTextFieldY.getText()) != null) satisfezAsRestricoes = true;
        } catch(NumberFormatException e) {
            satisfezAsRestricoes = false;
        }

        return satisfezAsRestricoes;
    }

}