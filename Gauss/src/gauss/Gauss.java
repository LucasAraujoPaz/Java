package gauss;

import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.table.DefaultTableModel;


/**
 * Resolve uma matriz de ordem &lt;= 10 via <b>Método da Eliminação de Gauss (MEG)</b> ou via <b>Gauss-Seidel</b>; ou <br>
 * 
 * <p>Realiza Regressão Polinomial (grau &lt; 10) pelo <b>Método dos Mínimos Quadrados (MMQ)</b>:<br>
 * <i>f(x) = a0 + a1*x + a2*x² + a3*x³...</i></p>
 * 
 * <p>É possível ainda encontrar o valor <i>f(x)</i> de um <i>x</i> qualquer neste polinômio encontrado pelo MMQ.</p>
 * <br>
 * Ajuda:
 * <p>Método da Eliminação de Gauss:</p><br>
 *	<ul><li>Preencha apenas a tabela MEG para obter o escalonamento MEG.</li></ul>
 * <p>Método Gauss-Seidel:</p><br>
 *	<ul><li>Preencha a tabela MEG e a tabela das primeiras aproximações ("chutes iniciais") para realizar o método Gauss-Seidel.</li></ul>
 * <p>Método dos Mínimos Quadrados:</p><br>
 *	<ul><li>Preencha a tabela MMQ (com os pontos, que são as coletas) e ajuste o grau do polinômio aproximador para calculá-lo.</li>
 *	<li>O MMQ usará MEG para encontrar os coeficientes do polinômio aproximador, mas também os calculará por Gauss-Seidel.</li>
 *	<li>Opcionalmente coloque aproximações iniciais na tabela Gauss-Seidel (os valores default serão todos 0).</li>
 *	<li>Também opcionalmente coloque um x para achar f(x) no polinômio aproximador.</li></ul>
 *
 * @author Lucas Paz
 */
public class Gauss extends javax.swing.JFrame {

    /**
     * Creates new form Gauss
     */
    public Gauss() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableInsereCoeficientes = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCoeficientes = new javax.swing.JTable();
        jButtonMEG = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableInsereConstantes = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableConstantes = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableIncognitas = new javax.swing.JTable();
        jButtonGaussSeidel = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableChuteInicial = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableMMQ = new javax.swing.JTable();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jButtonMMQ = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jTextField_x = new javax.swing.JTextField();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextPaneRegressaoPolinomial = new javax.swing.JTextPane();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextAreaResultados = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gauss");
        setResizable(false);

        jLabel1.setText("Número de incógnitas (ou 'Qnt. de Coeficientes (grau + 1)', caso MMQ)");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(2, 2, 10, 1));
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jTableInsereCoeficientes.setModel(modelInsereCoeficientes);
        jTableInsereCoeficientes.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableInsereCoeficientes);

        jScrollPane2.setEnabled(false);

        jTableCoeficientes.setModel(modelCoeficientes);
        jTableCoeficientes.setEnabled(false);
        jTableCoeficientes.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTableCoeficientes);

        jButtonMEG.setText("Escalonar por MEG");
        jButtonMEG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMEGActionPerformed(evt);
            }
        });

        jTableInsereConstantes.setModel(modelInsereConstantes);
        jTableInsereConstantes.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTableInsereConstantes);

        jScrollPane4.setEnabled(false);

        jTableConstantes.setModel(modelConstantes);
        jTableConstantes.setEnabled(false);
        jTableConstantes.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jTableConstantes);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Atenção a 0's e espaços vazios");

        jScrollPane5.setEnabled(false);

        jTableIncognitas.setModel(modelIncognitas);
        jTableIncognitas.setEnabled(false);
        jTableIncognitas.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(jTableIncognitas);

        jButtonGaussSeidel.setText("Gauss-Seidel");
        jButtonGaussSeidel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGaussSeidelActionPerformed(evt);
            }
        });

        jTableChuteInicial.setModel(modelChuteInicial);
        jTableChuteInicial.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(jTableChuteInicial);

        jTableMMQ.setModel(modelMMQ);
        jTableMMQ.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(jTableMMQ);

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(4, 2, 100, 1));
        jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner2StateChanged(evt);
            }
        });

        jLabel3.setText("Número de coletas");

        jButtonMMQ.setText("MMQ");
        jButtonMMQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMMQActionPerformed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("<html>A, B, C... : Coeficientes<br> ?: Incógnitas<br> b : Termos independentes</html>");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setAlignmentX(10.0F);
        jSeparator1.setAlignmentY(10.0F);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setAlignmentX(10.0F);
        jSeparator2.setAlignmentY(10.0F);

        jLabel6.setText("Resultados:");

        jSeparator3.setAlignmentX(10.0F);
        jSeparator3.setAlignmentY(10.0F);
        jSeparator3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        jTextField_x.setText("Insira x (opcional)");
        jTextField_x.setSelectionStart(0);
        jTextField_x.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField_xFocusGained(evt);
            }
        });

        jTextPaneRegressaoPolinomial.setEditable(false);
        jTextPaneRegressaoPolinomial.setContentType("text/html"); // NOI18N
        jTextPaneRegressaoPolinomial.setText("Resolva uma matriz de ordem &lt;= 10 via MEG ou via Gauss-Seidel; ou realize Regressão Polinomial (grau &lt; 10) por MMQ.<br>\nMEG = Método de Eliminação de Gauss.<br>\nMMQ = Método dos Mínimos Quadrados com Regressão Polinomial: f(x) = a0 + a1*x + a2*x² + a3*x³...");
        jTextPaneRegressaoPolinomial.setToolTipText("");
        jTextPaneRegressaoPolinomial.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane9.setViewportView(jTextPaneRegressaoPolinomial);

        jTextAreaResultados.setEditable(false);
        jTextAreaResultados.setColumns(20);
        jTextAreaResultados.setRows(5);
        jTextAreaResultados.setText("Use \".\".\nNo MMQ, a qnt. de coeficientes (grau do polinômio + 1) deve ser <= número de coletas.\nResultados:");
        jScrollPane8.setViewportView(jTextAreaResultados);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("<html><i>Autor: Lucas Paz</i></html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 709, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(185, 185, 185)
                                .addComponent(jButtonMEG, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(102, 102, 102)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonGaussSeidel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonMMQ, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField_x, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 696, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonMEG, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonGaussSeidel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(9, 9, 9)
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jButtonMMQ, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField_x, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    DefaultTableModel modelInsereCoeficientes = new DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "A", "B"
            }
        ) {
            @Override
            public Class getColumnClass(int columnIndex) {
                return java.lang.Double.class;
            }
        };
    DefaultTableModel modelInsereConstantes = new DefaultTableModel(
            new Object [][] {
                {null},
                {null}
            },
            new String [] {
                "b"
            }
        ) {
            @Override
            public Class getColumnClass(int columnIndex) {
                return java.lang.Double.class;
            }
        };
            
    DefaultTableModel modelCoeficientes = new DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "A", "B"
            }
        ) {
            @Override
            public Class getColumnClass(int columnIndex) {
                return java.lang.Double.class;
            }
        };
    DefaultTableModel modelConstantes = new DefaultTableModel(
            new Object [][] {
                {null},
                {null}
            },
            new String [] {
                "b"
            }
        ) {
            @Override
            public Class getColumnClass(int columnIndex) {
                return java.lang.Double.class;
            }
        };
    DefaultTableModel modelIncognitas = new DefaultTableModel(
            new Object [][] {
                {null},
                {null}
            },
            new String [] {
                "?"
            }
        ) {
            @Override
            public Class getColumnClass(int columnIndex) {
                return java.lang.Double.class;
            }
        };
    DefaultTableModel modelChuteInicial = new DefaultTableModel(
            new Object [][] {
                {"-"},
                {"0.0"}
            },
            new String [] {
                "Chute inicial"
            }
        );
    DefaultTableModel modelMMQ = new DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "x", "y"
            }
        ) {
            @Override
            public Class getColumnClass(int columnIndex) {
                return java.lang.Double.class;
            }
        };
    
    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        // TODO add your handling code here:
        modelInsereCoeficientes.setRowCount((int) jSpinner1.getValue());
        modelInsereCoeficientes.setColumnCount((int) jSpinner1.getValue());

        modelInsereConstantes.setRowCount((int) jSpinner1.getValue());
        modelInsereConstantes.setColumnCount(1);
        modelInsereConstantes.setColumnIdentifiers(new String [] {"b"});

        modelChuteInicial.setRowCount((int) jSpinner1.getValue());
        modelChuteInicial.setColumnCount(1);
        modelChuteInicial.setColumnIdentifiers(new String [] {"Chute inicial"});
    }//GEN-LAST:event_jSpinner1StateChanged
    /**
     * Método da Eliminação de Gauss.
     * <p>Escalona uma matriz deixando-a triangular superior.</p>
     * É necessário que a matriz seja escalonável.
     */
    private void metodoDaEliminacaoDeGauss(){
        double fator;
        modelCoeficientes.setRowCount((int) jTableInsereCoeficientes.getRowCount());
        modelCoeficientes.setColumnCount((int) jTableInsereCoeficientes.getColumnCount());
        
        modelConstantes.setRowCount((int) jTableInsereConstantes.getRowCount());
        modelConstantes.setColumnCount(1);
        modelConstantes.setColumnIdentifiers(new String [] {"b"});
        
        modelIncognitas.setRowCount((int) jTableInsereConstantes.getRowCount());
        modelIncognitas.setColumnCount(1);
        modelIncognitas.setColumnIdentifiers(new String [] {"?"});
        
        //copia os valores
        for (int i = 0; i < jTableInsereCoeficientes.getColumnCount(); i++) {
            for (int j = 0; j < jTableInsereCoeficientes.getColumnCount(); j++) {
                            jTableCoeficientes.setValueAt(jTableInsereCoeficientes.getValueAt(i, j), i, j);
            }
            jTableConstantes.setValueAt(jTableInsereConstantes.getValueAt(i, 0), i, 0);
        }
        
        //0 index based
        int pivo = 0; //qual linha está como pivô
        
                //atencao quando for 0 tem que trocar a posicao de linha por uma linha sem 0!!!
        System.out.println("MEG");
        jTextAreaResultados.setText(jTextAreaResultados.getText() + "Método de Escalonamento de Gauss\n");
        for (int col = 0; col < jTableCoeficientes.getColumnCount(); col++) { // anda pelas colunas
            //atencao aqui pode ser 0!!! tem q trocar caso seja
            double cPivo = Double.valueOf(jTableCoeficientes.getValueAt(pivo, col).toString());
            
            for (int line = col + 1; line < jTableCoeficientes.getRowCount(); line++) {// desce pela linha
                //checa se o valor do coeficiente em analise é zero
                if (Double.valueOf(jTableCoeficientes.getValueAt(line, col).toString()) == 0){continue;}
                //checa se o pivo é zero
                if (Double.valueOf(jTableCoeficientes.getValueAt(pivo, col).toString()) == 0) {
                    permutarLinhas(pivo, line);
                    cPivo = Double.valueOf(jTableCoeficientes.getValueAt(pivo, col).toString());
                }
                    
                fator = Double.valueOf(jTableCoeficientes.getValueAt(line, col).toString())/cPivo; //pode ser zero!
                System.out.println("fator = " + fator);
                jTextAreaResultados.setText(jTextAreaResultados.getText() + "\nfator = " + fator);
                for (int c = col; c < jTableCoeficientes.getColumnCount(); c++) {// percorre dentro da linha (pelas colunas) para mudar os coeficientes
                    double valorCoef = Double.valueOf(jTableCoeficientes.getValueAt(pivo, c).toString())*fator - Double.valueOf(jTableCoeficientes.getValueAt(line, c).toString());
                    System.out.println("valorCoef = " + valorCoef);
                    jTextAreaResultados.setText(jTextAreaResultados.getText() + "\nvalor do coeficiente = " + valorCoef);
                    jTableCoeficientes.setValueAt(valorCoef, line, c);
                }
                jTableConstantes.setValueAt(Double.valueOf(jTableConstantes.getValueAt(pivo, 0).toString())*fator - Double.valueOf(jTableConstantes.getValueAt(line, 0).toString()), line, 0);
            }
            pivo++;
        }
        
        System.out.println("");
        jTextAreaResultados.setText(jTextAreaResultados.getText() + "\n");
        
        //descobre as incognitas apos o escalonamento
        double[] incognitas = new double[jTableConstantes.getRowCount()];
        //Arrays.fill(incognitas, 0);

        //percorre da ultima linha à primeira achando as incognitas
        for (int l = jTableCoeficientes.getRowCount()-1; l >=0; l--) {
            double coeficiente = Double.valueOf(jTableCoeficientes.getValueAt(l, l).toString());
            incognitas[l] = (Double.valueOf(jTableConstantes.getValueAt(l, 0).toString()) - soma(l, incognitas, jTableCoeficientes))/coeficiente;
            modelIncognitas.setValueAt(incognitas[l], l, 0);
            System.out.println("incógnita[" + l + "] = " + incognitas[l]);
            jTextAreaResultados.setText(jTextAreaResultados.getText() + "\nincógnita[" + l + "] = " + incognitas[l] + "\n");
        }
        System.out.println();
    }
    
    /**
     * Método Gauss-Seidel.
     * <p>Procura obter os valores das variáveis através de um método iterativo.</p>
     * Depende das condições de convergência.
     */
    private void gaussSeidel(){
        double incognitas[] = new double[jTableChuteInicial.getRowCount()];
        
        //preenche vetor das incognitas
        for (int i = 1; i < jTableChuteInicial.getRowCount(); i++) {
            if (jTableChuteInicial.getValueAt(i, 0) == null) jTableChuteInicial.setValueAt(0d, i, 0);
                    
            if (jTableChuteInicial.getValueAt(i, 0) != ""){
                incognitas[i] = Double.valueOf(jTableChuteInicial.getValueAt(i, 0).toString());
            } else {
                incognitas[i] = 0d;
                jTableChuteInicial.setValueAt(0d, i, 0);
            }
        }
        
        System.out.println("Gauss-Seidel");
        jTextAreaResultados.setText(jTextAreaResultados.getText() + "Gauss-Seidel\n");
        //iterações do método
        for (int r = 0; r < 100; r++) {
            boolean continuar = false;
            System.out.println("iteração " + (r+1));
            jTextAreaResultados.setText(jTextAreaResultados.getText() + "\n" + "iteração " + (r+1));

            for (int l = 0; l < jTableChuteInicial.getRowCount(); l++) {
                double coeficiente = Double.valueOf(jTableInsereCoeficientes.getValueAt(l, l).toString());
                double comparador = incognitas[l];
                incognitas[l] = (Double.valueOf(jTableInsereConstantes.getValueAt(l, 0).toString()) - soma(l, incognitas, jTableInsereCoeficientes))/coeficiente;
                //checa se o modulo da diferenca entre o valor antigo e o novo é muito pequeno
                if (Math.abs(comparador - incognitas[l]) > 0.1E-16) continuar = true;
                //modelIncognitas.setValueAt(incognitas[l], l, 0);
                System.out.println("incógnita[" + l + "] = " + incognitas[l]);
                jTextAreaResultados.setText(jTextAreaResultados.getText() + "\nincógnita[" + l + "] = " + incognitas[l] + "\n");
            }
            System.out.println();
            if (continuar == false) break;
        }
        /*2 variaveis:
        double x; //Double.valueOf(jTableChuteInicial.getValueAt(0, 0).toString());//desnecessario
        double y = Double.valueOf(jTableChuteInicial.getValueAt(1, 0).toString());
        
        for (int r = 0; r < 100; r++) {
            x = (Double.valueOf(jTableInsereConstantes.getValueAt(0, 0).toString()) - Double.valueOf(jTableInsereCoeficientes.getValueAt(0, 1).toString())*y)/Double.valueOf(jTableInsereCoeficientes.getValueAt(0, 0).toString());
            y = (Double.valueOf(jTableInsereConstantes.getValueAt(1, 0).toString()) - Double.valueOf(jTableInsereCoeficientes.getValueAt(1, 0).toString())*x)/Double.valueOf(jTableInsereCoeficientes.getValueAt(1, 1).toString());
            System.out.print("x[" + (r+1) + "] = " + x);
            System.out.println(" y[" + (r+1) + "] = " + y + " \numColetas " );
        }*/
    }
    
    private void jButtonMEGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMEGActionPerformed
        // TODO add your handling code here:
        jTextAreaResultados.setText("");
        try {
            metodoDaEliminacaoDeGauss();
        } catch (Exception e) {
            jTextAreaResultados.setText("");
            JOptionPane.showMessageDialog(null, "Preencha corretamente toda a tabela MEG." ,"Gauss", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonMEGActionPerformed

    private void jButtonGaussSeidelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGaussSeidelActionPerformed
        // TODO add your handling code here:
        jTextAreaResultados.setText("");
        try {
            gaussSeidel();
        } catch (Exception e) {
            jTextAreaResultados.setText("");
            JOptionPane.showMessageDialog(null, "Preencha corretamente todas as tabelas MEG e Gauss-Seidel." ,"Gauss", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonGaussSeidelActionPerformed
        /**
         * Somatório de (Var**exp) 
         * @param exp Expoente da incógnita.
         * @return Somatório.
         */
    private double somatorio1Var(int exp){
        //Somatório de (Var**exp)        
        //exp é o expoente da incognita desejada
        double soma = 0;
        for (int row = 0; row < jTableMMQ.getRowCount(); row++) {
            //Soma de (Var**exp)
            soma += Math.pow(Double.valueOf(jTableMMQ.getValueAt(row, 0).toString()), exp);
        }
        return soma;
    }

    /**
     * Somatório de Y*(X**exp)
     * @param exp Expoente da incógnita.
     * @return Somatório.
     */
    private double somatorio2Var(int exp){
        //Somatório de Y*(X**exp)
        //exp é o expoente de X aqui
        double soma = 0;
        for (int row = 0; row < jTableMMQ.getRowCount(); row++) {
           //Soma de Y*(X**exp)
            soma += ( Double.valueOf(jTableMMQ.getValueAt(row, 1).toString()) ) * Math.pow( (Double.valueOf(jTableMMQ.getValueAt(row, 0).toString()) ), exp );
        }
        return soma;
    }
    
    private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner2StateChanged
        // TODO add your handling code here:
        modelMMQ.setRowCount((int) jSpinner2.getValue());
        modelMMQ.setColumnCount(2);
        modelMMQ.setColumnIdentifiers(new String [] {"x", "y"});
        
        if ((int)jSpinner1.getValue() > (int)jSpinner2.getValue()) jSpinner1.setValue((int)jSpinner2.getValue());
    }//GEN-LAST:event_jSpinner2StateChanged

    /**
     * Método dos Mínimos Quadrados com regressão polinomial.
     * 
     * <p>Encontra o polinômio (do grau desejado) que melhor ajusta dados pontos.</p>
     * <p>Só faz sentido calcular um número de coeficientes &lt;= número de coletas,
     * ou seja, um polinômio de grau &lt; que o número de coletas, pois
     * um teorema da álgebra garante que o polinômio interpolador é de grau menor que o número de coletas.</p>
     */
    private void mmq(){
        if ((int) jSpinner1.getValue() > (int) jSpinner2.getValue()) jSpinner1.setValue((int) jSpinner2.getValue());
        
        int numIncognitas = (int) jSpinner1.getValue();
        int numColetas = (int) jSpinner2.getValue();
        
        //vetores dos somatorios de X**index e YX**index
        double somatoriosX[] = new double[(numIncognitas-1)*2 + 1];
        //double somatoriosYX[] = new double[numIncognitas];
        
        //preenche os somatorios de X**index
        for (int i = 0; i < somatoriosX.length; i++) {
            somatoriosX[i] = somatorio1Var(i);
        }
        
        //preenche as tabelas de inserção de dados
        for (int i = 0; i < jTableInsereCoeficientes.getRowCount(); i++) {
            for (int j = 0; j < jTableInsereCoeficientes.getColumnCount(); j++) {
                jTableInsereCoeficientes.setValueAt(somatoriosX[i + j], i, j);
            }
            jTableInsereConstantes.setValueAt(somatorio2Var(i), i, 0);
        }

        gaussSeidel();
        jTextAreaResultados.setText(jTextAreaResultados.getText() + "\n");
        metodoDaEliminacaoDeGauss();
        //jTableChuteInicial.setValueAt(0, 1, 0);

        String s = "<html>MMQ Regressão polinomial: f(x) = " + jTableIncognitas.getValueAt(0, 0) +
                " + " + jTableIncognitas.getValueAt(1, 0) + "x";

        JTextPane jTextPane = new JTextPane();
        jTextPane.setContentType("text/html");
        
        for (int i = 2; i < numIncognitas; i++) {
            String htmlText = "x<sup>" + String.valueOf(i) + "</sup>";
            s += " + " + jTableIncognitas.getValueAt(i, 0) + htmlText;
        }
        s += "</html>";
        jTextPane.setText(s);
        jTextPaneRegressaoPolinomial.setText(s);
        
        //System.out.println(s);
        
        try {
            if (jTextField_x.getText().length() != 0) {
                double x = Double.valueOf(jTextField_x.getText());
                double y=0;
                
                for (int i = 0; i < numIncognitas; i++) {
                    y += Double.valueOf(jTableIncognitas.getValueAt(i, 0).toString())*Math.pow(x, i);
                }
                System.out.println(String.valueOf("f(" + Double.valueOf(jTextField_x.getText()) + ") = " + y));
                jTextAreaResultados.setText(jTextAreaResultados.getText() + "\n" + String.valueOf("f(" + Double.valueOf(jTextField_x.getText()) + ") = " + y));
                JOptionPane.showMessageDialog(null, String.valueOf("f(" + Double.valueOf(jTextField_x.getText()) + ") = " + y),"MMQ",JOptionPane.PLAIN_MESSAGE);
            }
        } catch (NumberFormatException e){
        }
        
            System.out.println("R²: " + (1 - somaQuadraticaResidual()/somaQuadraticaTotal() ) );
            jTextAreaResultados.setText(jTextAreaResultados.getText() + "\nR²: " + (1 - somaQuadraticaResidual()/somaQuadraticaTotal() ) );
            System.out.println("Erro Quadrático: " + Math.sqrt(somaQuadraticaResidual()) + "\n");
            jTextAreaResultados.setText(jTextAreaResultados.getText() + "\nErro Quadrático: " + Math.sqrt(somaQuadraticaResidual()) + "\n");
    }
    
    private void jButtonMMQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMMQActionPerformed
        // TODO add your handling code here:
        jTextAreaResultados.setText("");
        try {
            mmq();
        } catch (java.lang.Exception e) {
            jTextAreaResultados.setText("");
            JOptionPane.showMessageDialog(null, "Preencha corretamente todas as coletas da tabela MMQ." ,"Gauss", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonMMQActionPerformed

    private void jTextField_xFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField_xFocusGained
        // TODO add your handling code here:
        jTextField_x.setSelectionStart(0);
        jTextField_x.setSelectionEnd(25);
    }//GEN-LAST:event_jTextField_xFocusGained

    /**
     * Calcula a Soma Quadrática Residual, isto é, o somatório (Yobservado - Yprevisto)^2.
     * @return Soma Quadrática Residual.
     */
    private double somaQuadraticaResidual(){
        double SQResidual = 0;

        //y = a0 + a1*x¹ + a2*x² + a3*x³...
        double coeficientes[] = new double[(int)jSpinner1.getValue()];
        
        //preenche o vetor dos coeficientes
        for (int i = 0; i < coeficientes.length; i++) {
            coeficientes[i] = Double.valueOf(jTableIncognitas.getValueAt(i, 0).toString());
        }
        
        for (int row = 0; row < jTableMMQ.getRowCount(); row++) {
            double x = Double.valueOf(jTableMMQ.getValueAt(row, 0).toString());
            double y = Double.valueOf(jTableMMQ.getValueAt(row, 1).toString());

            double yPrevisto = 0;
            for (int i = 0; i < coeficientes.length; i++) { //calcular o y previsto
                yPrevisto += coeficientes[i]*Math.pow(x, i);
            }
            //System.out.println("SQR " + Math.pow(y - (yPrevisto/*:= a0 + a1*x¹ + a2*x² + a3*x³...*/), 2));
            SQResidual += Math.pow(y - yPrevisto, 2);
        }

/*        //y = c + mx
        double c = Double.valueOf(jTableIncognitas.getValueAt(0, 0).toString()); 
        double m = Double.valueOf(jTableIncognitas.getValueAt(1, 0).toString());
        
        for (int row = 0; row < jTableDados.getRowCount(); row++) {
            double x = Double.valueOf(jTableDados.getValueAt(row, 0).toString());
            double y = Double.valueOf(jTableDados.getValueAt(row, 1).toString());
            //System.out.println(Math.pow(y - (c + m*x), 2));
            SQResidual += Math.pow(y - (c + m*x), 2);
        }*/
        return SQResidual;
    }
    
    /**
     * Calcula a Soma Quadrática Total, isto é, o somatorio (Yobservado - médiaDosY)^2
     * @return Soma Quadrática Total.
     */
    private double somaQuadraticaTotal(){
        double SQTotal = 0;
        double mediaDosY = 0;

        for (int row = 0; row < jTableMMQ.getRowCount(); row++) {
            mediaDosY += Double.valueOf(jTableMMQ.getValueAt(row, 1).toString());
        }
        mediaDosY = mediaDosY/(double) (int) jSpinner2.getValue();
        //System.out.println("mediaDosY = " + mediaDosY);
        
        for (int row = 0; row < jTableMMQ.getRowCount(); row++) {
            double y = Double.valueOf(jTableMMQ.getValueAt(row, 1).toString());
            //System.out.println(Math.pow(y - mediaDosY, 2));
            SQTotal += Math.pow(y - mediaDosY, 2);
        }
        return SQTotal;
    }

    /**
     * Permuta 2 duas linhas (troca de lugar).
     * @param l1 Linha 1.
     * @param l2 Linha 2.
     */
    private void permutarLinhas(int l1, int l2){
        Object reserva;
        for (int c = 0; c < jTableCoeficientes.getColumnCount(); c++) {
            reserva = jTableCoeficientes.getValueAt(l1, c);
            jTableCoeficientes.setValueAt(jTableCoeficientes.getValueAt(l2, c), l1, c);
            jTableCoeficientes.setValueAt(reserva, l2, c);
        }
        reserva = jTableConstantes.getValueAt(l1, 0);
        jTableConstantes.setValueAt(jTableConstantes.getValueAt(l2, 0), l1, 0);
        jTableConstantes.setValueAt(reserva, l2, 0);

        System.out.println("trocou " + l1 + " por " + l2);
        jTextAreaResultados.setText(jTextAreaResultados.getText() + "\ntrocou " + l1 + " por " + l2);
    }

    /**
     * Método auxiliar a MEG e Gauss-Seidel que realiza um somatório de coeficientes*incógnitas necessário a ambos os métodos.
     * @param l Índice da linha.
     * @param incognitas Valor das incógnitas.
     * @param jTable Tabela que será trabalhada.
     * @return Somatório coeficientes*incógnitas.
     */
    private double soma(int l, double[] incognitas, javax.swing.JTable jTable){
        double soma = 0;

        for (int c = 0; c < jTable.getColumnCount(); c++) {
            if (c == l) {continue;}
            soma += Double.valueOf(jTable.getValueAt(l, c).toString())*incognitas[c];
        }
        return soma;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gauss.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gauss.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gauss.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gauss.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Gauss().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonGaussSeidel;
    private javax.swing.JButton jButtonMEG;
    private javax.swing.JButton jButtonMMQ;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTable jTableChuteInicial;
    private javax.swing.JTable jTableCoeficientes;
    private javax.swing.JTable jTableConstantes;
    private javax.swing.JTable jTableIncognitas;
    javax.swing.JTable jTableInsereCoeficientes;
    private javax.swing.JTable jTableInsereConstantes;
    private javax.swing.JTable jTableMMQ;
    private javax.swing.JTextArea jTextAreaResultados;
    private javax.swing.JTextField jTextField_x;
    private javax.swing.JTextPane jTextPaneRegressaoPolinomial;
    // End of variables declaration//GEN-END:variables
}
