package interpolador;

import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**<b>Integração Numérica</b> e <b>Polinômio Interpolador</b>: <b>Regra do Trapézio</b>, <b>Polinômio interpolador de Newton</b>,
 * <b>Regra do Ponto Médio</b> e <b>Regra de Simpson através de Polinômios de Newton do segundo grau</b>.
 * <p>É possível ainda encontrar o valor <i>f(x)</i> de um <i>x</i> qualquer neste polinômio de Newton encontrado.</p>
 *
 *<p>Polinômio de Newton: f[x0] + f[x1, x0]*(x - x0) + f[x2, x1, x0]*(x - x0)*(x - x1)*(x - x2) + ...<br>
 *=  f[x0] + (x - x0)*{ f[x1, x0] + (x - x1)*[ f[x2, x1, x0] + ...]}</p>
 *
 *<p>Para simplificar, nomeie-se:<br>
 *f[x0] como f0<br>
 *f[x1, x0] como f1<br>
 *f[x2, x1, x0] como f2<br>
 *f[xn, xn-1, ... , x1, x0] como fn.</p>
 *
 *<p>Polinômio de Newton de grau 2, Ax² + Bx + C:  A = f2 , B = -f2*x1 - f2*x0 + f1 , C = f2*x1*x0 - f1*x0 + f0.</p>
 *
 *<p>Integral do Polinômio de Newton de grau 2 é de grau 3, Ax³ + Bx² + Cx (neste caso D = 0):<br>
 *A = (f2)/3 , B = (-f2*x1 - f2*x0 + f1)/2 , C = f2*x1*x0 - f1*x0 + f0 , D = (0)</p>
 *
 *<p>A regra de Simpson aqui usará Polinômios de Newton de grau 2.<br>
 *Dessa forma, os valores de x não precisam estar a uma mesma distância uns dos outros.</p>
 * 
 * @author Lucas Paz
 */
public class Interpolador extends javax.swing.JFrame {
    /**
     * Creates new form Interpolador
     */
    public Interpolador() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSpinnerNumDePontos = new javax.swing.JSpinner();
        jButtonTrapezio = new javax.swing.JButton();
        jButtonNewton = new javax.swing.JButton();
        jButtonSimpson = new javax.swing.JButton();
        jButtonAcharFDeXComPolinomioDeNewton = new javax.swing.JButton();
        jTextField_x = new javax.swing.JTextField();
        jTextFieldA = new javax.swing.JTextField();
        jTextFieldB = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButtonExtremosPontoMedio = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButtonExtremosSimpson = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jSpinnerIntervalos = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextAreaResultados = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Interpolador");
        setResizable(false);

        jTable1.setModel(modeloDados);
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jSpinnerNumDePontos.setModel(new javax.swing.SpinnerNumberModel(11, 2, 100, 1));
        jSpinnerNumDePontos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerNumDePontosStateChanged(evt);
            }
        });

        jButtonTrapezio.setText("Integrar via Regra do Trapézio");
        jButtonTrapezio.setToolTipText("");
        jButtonTrapezio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTrapezioActionPerformed(evt);
            }
        });

        jButtonNewton.setText("Polinômio de Newton");
        jButtonNewton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewtonActionPerformed(evt);
            }
        });

        jButtonSimpson.setText("<html>Integrar todo o intervalo via<br>Regra de Simpson</html>");
        jButtonSimpson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSimpsonActionPerformed(evt);
            }
        });

        jButtonAcharFDeXComPolinomioDeNewton.setText("<html>Achar f(x) no Polinômio de Newton</html>");
        jButtonAcharFDeXComPolinomioDeNewton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAcharFDeXComPolinomioDeNewtonActionPerformed(evt);
            }
        });

        jTextField_x.setText("Insira x (use \".\")");
        jTextField_x.setNextFocusableComponent(jButtonAcharFDeXComPolinomioDeNewton);
        jTextField_x.setSelectionEnd(20);
        jTextField_x.setSelectionStart(0);
        jTextField_x.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField_xFocusGained(evt);
            }
        });

        jTextFieldA.setNextFocusableComponent(jTextFieldB);

        jTextFieldB.setNextFocusableComponent(jSpinnerIntervalos);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Integrar, com Polinômio de Newton, de a até b");

        jButtonExtremosPontoMedio.setText("Integrar via Regra do Ponto Médio");
        jButtonExtremosPontoMedio.setNextFocusableComponent(jButtonExtremosSimpson);
        jButtonExtremosPontoMedio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExtremosPontoMedioActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("até");

        jButtonExtremosSimpson.setText("Integrar via Regra de Simpson");
        jButtonExtremosSimpson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExtremosSimpsonActionPerformed(evt);
            }
        });

        jLabel4.setText("Dividindo em n intervalos");

        jSpinnerIntervalos.setModel(new javax.swing.SpinnerNumberModel(4, 2, 1000, 2));
        jSpinnerIntervalos.setNextFocusableComponent(jButtonExtremosPontoMedio);

        jLabel5.setText("Número de pontos");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setAlignmentX(10.0F);
        jSeparator2.setAlignmentY(10.0F);

        jTextAreaResultados.setEditable(false);
        jTextAreaResultados.setColumns(20);
        jTextAreaResultados.setRows(5);
        jTextAreaResultados.setText("Integra diretamente via Regra do Trapézio ou Simpson; ou\nEncontra o polinômio de Newton (cuidado com repetição de x); ou\nAcha f(x) no polinômio de Newton; ou\nIntegra um intervalo subdividido via Ponto Médio ou Simpson.\n\nResultados:");
        jScrollPane8.setViewportView(jTextAreaResultados);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("<html><i>Autor: Lucas Paz</i></html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jSpinnerNumDePontos, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonTrapezio)
                                    .addComponent(jButtonNewton, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonSimpson, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(46, 46, 46)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField_x, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonAcharFDeXComPolinomioDeNewton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextFieldA, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jSpinnerIntervalos, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(49, 49, 49)
                                        .addComponent(jButtonExtremosSimpson, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextFieldB, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(25, 25, 25)
                                        .addComponent(jButtonExtremosPontoMedio))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinnerNumDePontos, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonTrapezio, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(jButtonNewton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(jButtonSimpson, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(jButtonAcharFDeXComPolinomioDeNewton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField_x, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator2))
                        .addGap(57, 57, 57)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jTextFieldA, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jTextFieldB, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonExtremosPontoMedio, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonExtremosSimpson, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerIntervalos, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //public static double[] coeficientesDaClasse;
    
    DefaultTableModel modeloDados = new javax.swing.table.DefaultTableModel(
        new Double [][] {
            {0d,1d},
            {0.1d,Math.pow(Math.E, (Math.pow(0.1d, 2)))},
            {0.2d,Math.pow(Math.E, (Math.pow(0.2d, 2)))},
            {0.3d,Math.pow(Math.E, (Math.pow(0.3d, 2)))},
            {0.4d,Math.pow(Math.E, (Math.pow(0.4d, 2)))},
            {0.5d,Math.pow(Math.E, (Math.pow(0.5d, 2)))},
            {0.6d,Math.pow(Math.E, (Math.pow(0.6d, 2)))},
            {0.7d,Math.pow(Math.E, (Math.pow(0.7d, 2)))},
            {0.8d,Math.pow(Math.E, (Math.pow(0.8d, 2)))},
            {0.9d,Math.pow(Math.E, (Math.pow(0.9d, 2)))},
            {1d,Math.E},
        },
        new String [] {
            "x", "y"
        }
    ) {
    @Override
    public Class getColumnClass(int columnIndex) {
        return java.lang.Double.class;
    }
};
    
    private void jSpinnerNumDePontosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerNumDePontosStateChanged
        // TODO add your handling code here:
        if (Integer.valueOf(jSpinnerNumDePontos.getValue().toString()) > modeloDados.getRowCount()){
            while(Integer.valueOf(jSpinnerNumDePontos.getValue().toString()) > modeloDados.getRowCount()){
                modeloDados.addRow(new Double[] {,});
            }
        } else if (Integer.valueOf(jSpinnerNumDePontos.getValue().toString()) < modeloDados.getRowCount()) {
            while(Integer.valueOf(jSpinnerNumDePontos.getValue().toString()) < modeloDados.getRowCount()){
                modeloDados.removeRow(modeloDados.getRowCount()-1);
            }
            //modeloDaTabelaDeDados.setRowCount(Integer.valueOf(jSpinner1.getValue().toString()));
        }
    }//GEN-LAST:event_jSpinnerNumDePontosStateChanged

    /**Ordena a tabela de dados para obter os x de forma crescente.*/
    private void sort(){
        for (int i = 0; i < modeloDados.getRowCount()-1; i++) {
            double xi = Double.valueOf(modeloDados.getValueAt(i, 0).toString());
            for (int j = i+1; j < modeloDados.getRowCount(); j++) {
                double xj = Double.valueOf(modeloDados.getValueAt(j, 0).toString());
                //quero que xi < xj (ordem crescente)
                if ( ! (xi < xj) ) { //problema, precisa substituir
                    double yi = Double.valueOf(modeloDados.getValueAt(i, 1).toString());
                    double yj = Double.valueOf(modeloDados.getValueAt(j, 1).toString());
                    double reserva[] = {xj, yj};

                    //explicando:
                    //xj = xi;
                    //yj = yi;
                    //xi = reserva[0];
                    //yi = reserva[1];

                    modeloDados.setValueAt(xi, j, 0);
                    modeloDados.setValueAt(yi, j, 1);
                    modeloDados.setValueAt(reserva[0], i, 0);
                    modeloDados.setValueAt(reserva[1], i, 1);
                }
            }
        }
    }

    private void jButtonTrapezioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTrapezioActionPerformed
        // TODO add your handling code here:
        sort();
        double area = 0;
        for (int i = 0; i < jTable1.getRowCount()-1; i++) {
            if (modeloDados.getValueAt(i,0)==null) modeloDados.setValueAt(0,i,0);
            if (modeloDados.getValueAt(i+1,0)==null) modeloDados.setValueAt(0,i+1,0);
            if (modeloDados.getValueAt(i,1)==null) modeloDados.setValueAt(0,i,1);
            if (modeloDados.getValueAt(i+1,1)==null) modeloDados.setValueAt(0,i+1,1);
            
            double x0 = Double.valueOf(modeloDados.getValueAt(i,0).toString());
            double y0 = Double.valueOf(modeloDados.getValueAt(i,1).toString());
            double x1 = Double.valueOf(modeloDados.getValueAt(i+1,0).toString());
            double y1 = Double.valueOf(modeloDados.getValueAt(i+1,1).toString());
            //System.out.println(regraDoTrapezio(x0, y0, x1, y1));
            area += regraDoTrapezio(x0, y0, x1, y1);
        }
        System.out.println("Área = " + area);
        jTextAreaResultados.setText(jTextAreaResultados.getText() + "\n\nÁrea = " + area);
    }//GEN-LAST:event_jButtonTrapezioActionPerformed
    
    private void jButtonNewtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewtonActionPerformed
        // TODO add your handling code here:
        double[] newton = polinomioDeNewton();
        
        String poliNewtonClassico = poliNewtonClassicoToString(newton);
        String poliNewtonParentesis = poliNewtonParentesisToString(newton);
        
        System.out.println(poliNewtonClassico);
        jTextAreaResultados.setText(jTextAreaResultados.getText() + "\n\n" + poliNewtonClassico);
        System.out.println(poliNewtonParentesis);
        jTextAreaResultados.setText(jTextAreaResultados.getText() + "\n" + poliNewtonParentesis);
    }//GEN-LAST:event_jButtonNewtonActionPerformed

    private void jButtonSimpsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSimpsonActionPerformed
        // TODO add your handling code here:
        sort();
        if (modeloDados.getRowCount()%2 == 0 || modeloDados.getRowCount() < 3) {
            System.out.println("Para a Regra de Simpson, o número de pontos deve ser ímpar e > 2, e o número de intervalos deve ser par");
            JOptionPane.showMessageDialog(null, "Para a Regra de Simpson, o número de pontos deve ser ímpar e > 2, e o número de intervalos deve ser par", "Interpolador", JOptionPane.ERROR_MESSAGE);
        } else {
            double area = 0;
            for (int i = 0; i < modeloDados.getRowCount()-1; i += 2) {
                double xi = Double.valueOf(modeloDados.getValueAt(i, 0).toString());
                double xiMais2 = Double.valueOf(modeloDados.getValueAt(i+2, 0).toString());
                area += integralGrau2(poliNewtonGrau2(i), xi, xiMais2);
            }
            System.out.println("Área = " + area);
            jTextAreaResultados.setText(jTextAreaResultados.getText() + "\n\nÁrea = " + area);
        }
    }//GEN-LAST:event_jButtonSimpsonActionPerformed

    private void jButtonAcharFDeXComPolinomioDeNewtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAcharFDeXComPolinomioDeNewtonActionPerformed
        // TODO add your handling code here:
        try {
            if (jTextField_x.getText().length() == 0) {
                System.out.println("Digite um número x");
                JOptionPane.showMessageDialog(null, "Digite um número x", "Interpolador", JOptionPane.ERROR_MESSAGE);
            }
            else{
                double fDeX = acharFDeXComPolinomioDeNewton(Double.valueOf(jTextField_x.getText()), polinomioDeNewton());

                System.out.println("f(" + Double.valueOf(jTextField_x.getText()) + ") = " + fDeX);
                jTextAreaResultados.setText(jTextAreaResultados.getText() + "\n\nf(" + Double.valueOf(jTextField_x.getText()) + ") = " + fDeX);
            }
        }catch(NumberFormatException e){
            System.out.println("Digite corretamente um número x");
            JOptionPane.showMessageDialog(null, "Digite corretamente um número x", "Interpolador", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonAcharFDeXComPolinomioDeNewtonActionPerformed

    private void jButtonExtremosPontoMedioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExtremosPontoMedioActionPerformed
        // TODO add your handling code here:
        sort();
        double a = Double.valueOf(jTextFieldA.getText());
        double b = Double.valueOf(jTextFieldB.getText());
        
        int n = Integer.valueOf(jSpinnerIntervalos.getValue().toString());
        
        double intervaloTotal = b-a;
        double intervalinho = intervaloTotal/(double)n;
        
        double[]coeficientes = polinomioDeNewton();
        
        double area=0;
                
        double x0 = a;
        double x2 = a + intervalinho;
        double xMedio = (x0 + x2)/2d;

        for (int i = 0; i < n; i++) {
            double fxMedio = acharFDeXComPolinomioDeNewton(xMedio, coeficientes);

            area += fxMedio;

            x0 = x2;
            x2 += intervalinho;
            xMedio = (x0 + x2)/2d;
        }
        area = area*intervalinho;
        System.out.println("Área: " + area);
        jTextAreaResultados.setText(jTextAreaResultados.getText() + "\n\nÁrea = " + area);
    }//GEN-LAST:event_jButtonExtremosPontoMedioActionPerformed

    private void jButtonExtremosSimpsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExtremosSimpsonActionPerformed
        // TODO add your handling code here:
        int n = Integer.valueOf(jSpinnerIntervalos.getValue().toString());
        
        if (n%2 != 0) {
            System.out.println("Para a Regra de Simpson, o número de pontos deve ser ímpar e > 2, e o número de intervalos deve ser par");
            JOptionPane.showMessageDialog(null, "Para a Regra de Simpson, o número de pontos deve ser ímpar e > 2, e o número de intervalos deve ser par", "Interpolador", JOptionPane.ERROR_MESSAGE);
        }
        else {
            sort();
            double a = Double.valueOf(jTextFieldA.getText());
            double b = Double.valueOf(jTextFieldB.getText());



            double intervaloTotal = b-a;
            double intervalinho = intervaloTotal/(double)n;

            double[]coeficientes = polinomioDeNewton();

            double area=0;

            double x0 = a;
            double x1 = a + intervalinho;
            double x2 = x1 + intervalinho;

            for (int i = 0; i < n; i+=2) {
                //area += integralGrau2(poliNewtonGrau2(x0,x1,x2,coeficientes), x0, x2);
                area += acharFDeXComPolinomioDeNewton(x0, coeficientes) +
                        4*acharFDeXComPolinomioDeNewton(x1, coeficientes) +
                        acharFDeXComPolinomioDeNewton(x2, coeficientes);

                x0 = x2;
                x1 = x0 + intervalinho;
                x2 = x1 + intervalinho;
            }
            area = area/3d*intervalinho;
            System.out.println("Área: " + area);
            jTextAreaResultados.setText(jTextAreaResultados.getText() + "\n\nÁrea = " + area);
        }
    }//GEN-LAST:event_jButtonExtremosSimpsonActionPerformed

    private void jTextField_xFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField_xFocusGained
        // TODO add your handling code here:
        jTextField_x.setSelectionStart(0);
        jTextField_x.setSelectionEnd(25);
    }//GEN-LAST:event_jTextField_xFocusGained
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interpolador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interpolador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interpolador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interpolador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interpolador().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAcharFDeXComPolinomioDeNewton;
    private javax.swing.JButton jButtonExtremosPontoMedio;
    private javax.swing.JButton jButtonExtremosSimpson;
    private javax.swing.JButton jButtonNewton;
    private javax.swing.JButton jButtonSimpson;
    private javax.swing.JButton jButtonTrapezio;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSpinner jSpinnerIntervalos;
    private javax.swing.JSpinner jSpinnerNumDePontos;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextAreaResultados;
    private javax.swing.JTextField jTextFieldA;
    private javax.swing.JTextField jTextFieldB;
    private javax.swing.JTextField jTextField_x;
    // End of variables declaration//GEN-END:variables

    /**
     * Integra um intervalo de 2 pontos pela regra do trapézio.
     * @param x0 Primeiro x.
     * @param y0 Primeiro y.
     * @param x1 Segundo x.
     * @param y1 Segundo y.
     * @return Área.
     */
    private double regraDoTrapezio(Double x0, Double y0, Double x1, Double y1) {
        return Math.abs(x1 - x0)*(y0 + y1)/2d;
    }
    
    /**
     * Encontra as diferenças divididas do Polinômio de Newton.
     * @return Diferenças divididas do Polinômio de Newton.
     */
    private double[] polinomioDeNewton() {
        int numDeLinhas = modeloDados.getRowCount();
        double diferencasDivididas[] = new double[numDeLinhas];//diferencas divididas que acabam em x0 e portanto estarão nos coeficientesDaClasse do polinômio de Newton, isto é, do tipo: (f[xn, xn-1 , ... , x1, x0])
        ArrayList<Double> listaOrdemPar = new ArrayList();
        ArrayList<Double> listaOrdemImpar = new ArrayList();

        diferencasDivididas[0] = Double.valueOf(modeloDados.getValueAt(0, 1).toString());

        for (int linha = 0; linha < numDeLinhas-1; linha++) { //primeira iteraçao, acha as diferencas divididas de ordem 1 com base nos ys.
            double x0 = Double.valueOf(modeloDados.getValueAt(linha, 0).toString());
            double y0 = Double.valueOf(modeloDados.getValueAt(linha, 1).toString());
            double x1 = Double.valueOf(modeloDados.getValueAt(linha+1, 0).toString());
            double y1 = Double.valueOf(modeloDados.getValueAt(linha+1, 1).toString());
            
            if (x0==x1) {
                System.out.println("Erro: dois x iguais");
                JOptionPane.showMessageDialog(null, "Erro: dois x iguais", "Interpolador", JOptionPane.ERROR_MESSAGE);
            }
            listaOrdemImpar.add((y1-y0)/(x1-x0));
        }
        diferencasDivididas[1] = listaOrdemImpar.get(0);
        
        for (int ordem = 2; ordem < numDeLinhas; ordem++) { //acha as demais diferencas divididas (a ordem é a das diferencas divididas, como se fossem "derivadas")
            for (int linha = 0; linha < numDeLinhas-ordem; linha++) { // a linha é a da dif.dividida, em oposição à ordem, que é sua "coluna"
                    double xLinha = Double.valueOf(modeloDados.getValueAt(linha, 0).toString()); //x da mesma linha da dif.div.
                    double xLinhaMaisOrdem = Double.valueOf(modeloDados.getValueAt(linha+ordem, 0).toString()); //x da linha (da dif.div. + ordem)
                    if (xLinha==xLinhaMaisOrdem) {System.out.println("Erro: dois x iguais");JOptionPane.showMessageDialog(null, "Erro: dois x iguais", "Interpolador", JOptionPane.ERROR_MESSAGE);}
                if (ordem%2 == 0) { //ordem par, usa-se lista par
                    listaOrdemPar.add((listaOrdemImpar.get(linha+1)-listaOrdemImpar.get(linha))/(xLinhaMaisOrdem - xLinha));
                }else { //ordem impar, usa-se lista impar
                    listaOrdemImpar.add((listaOrdemPar.get(linha+1)-listaOrdemPar.get(linha))/(xLinhaMaisOrdem - xLinha));
                }
            }
            if (ordem%2 == 0) { //ordem par, usa-se lista par
                    diferencasDivididas[ordem] = listaOrdemPar.get(0);
                    listaOrdemImpar.clear();
            }else { //ordem impar, usa-se lista ímpar
                    diferencasDivididas[ordem] = listaOrdemImpar.get(0);
                    listaOrdemPar.clear();                
            }
        }
        String difDiv = Arrays.toString(diferencasDivididas);
        System.out.println("Coeficientes de difs. divs.: " + difDiv);
        jTextAreaResultados.setText(jTextAreaResultados.getText() + "\n\nCoeficientes de difs. divs.: " + difDiv);

        return diferencasDivididas;
    }

     /**
      * Encontra f(x) no polinômio de Newton dado.
      * @param x O x dado.
      * @param coeficientes Coeficientes do polinômio de Newton.
      * @return f(x).
      */
    private double acharFDeXComPolinomioDeNewton(double x, double[] coeficientes){
        //dados os coeficientesDaClasse (f0, f1, f2, ...), acha o valor de f(x) através do polinimio de newton (forma dos parentesis)
        //f0 + (x - x0)*{f1 + (x - x1)*[f2 + (x - x2)*f3 ... ]}
        double y; //y = f(x)

        if (coeficientes.length == 1) return coeficientes[0]; // caso em que só há f0
        //else
        y = calculaDentroDeParentesisSucessivos(x, 0, coeficientes); //caso geral

        return y;
    }

    /**
     * Resolve recursivamente o polinômio de Newton = f[i] + (x - x[i])*{f[i+1]...
     * @param x O x dado.
     * @param i Índice i.
     * @param coeficientes Coeficientes do polinômio de Newton.
     * @return Resultado.
     */
    private double calculaDentroDeParentesisSucessivos(double x, int i, double[] coeficientes){
        //soma = f[i] + (x - x[i])*{f[i+1]...

        if (i == qntRealDeCoeficientes(coeficientes)-1) return coeficientes[i]; //caso seja a ultima
        else {//caso normal
            double xMenosxi = (x - Double.valueOf(modeloDados.getValueAt(i, 0).toString())); //(x - x[i])
            return coeficientes[i] + xMenosxi*calculaDentroDeParentesisSucessivos(x, i+1, coeficientes);
        }
    //indice++
    }
    
    /**
     * Revela o polinômio de Newton em sua forma clássica:<br>
     * f[x0] + f[x1, x0]*(x - x0) + f[x2, x1, x0]*(x - x0)*(x - x1)*(x - x2) + ...
     * @param coeficientes Coeficientes do polinômio de Newton.
     * @return O polinômio de Newton em sua forma clássica.
     */
    private String poliNewtonClassicoToString(double[] coeficientes){
        String p = "Polinômio interpolador de Newton (Forma clássica): ";
        if (coeficientes[0] != 0) p += coeficientes[0]; 
        else if (qntRealDeCoeficientes(coeficientes) == 1) { //f0 é 0 e só há ele
            p += 0;
        }
        
        for (int c = 1; c < qntRealDeCoeficientes(coeficientes); c++) {
            if (p.equals("Polinômio interpolador de Newton (Forma clássica): ")) {
                p += (coeficientes[c]==1d) ? xMenosXiCompostoToString(c) : coeficientes[c] + xMenosXiCompostoToString(c);
            }
            else if (coeficientes[c]!= 0) {
                p += " + ";
                p += (coeficientes[c]==1d) ? xMenosXiCompostoToString(c) : coeficientes[c] + "*" + xMenosXiCompostoToString(c);
            }
        }
        return p;
    }
    
    /**
     * Revela a string "(x - x[0])*(x - x[1])*...*(x - x[i])".
     * @param ordem i final.
     * @return A string com seus valores substituídos.
     */
    private String xMenosXiCompostoToString(int ordem){
        String s = "";
        for (int i = 0; i < ordem; i++) {
            if (Double.valueOf(modeloDados.getValueAt(i, 0).toString()) != 0){//xi não é 0
                s += (i==0)?"(x ":"*(x ";
                s += Double.valueOf(modeloDados.getValueAt(i, 0).toString())>=0?"- ":"";
                s += modeloDados.getValueAt(i, 0) + ")";
            }
            else {//xi é 0
                s += (i==0)?"x":"*x";
            }
        }
        return s;
    }

    /**
     * Revela o polinômio de Newton em sua forma de parêntesis aninhados:<br>
     * f[x0] + (x - x0)*( f[x1, x0] + (x - x1)*( f[x2, x1, x0] + ... ) )
     * @param coeficientes Coeficientes do polinômio de Newton.
     * @return O polinômio de Newton em sua forma de parêntesis aninhados.
     */    
    private String poliNewtonParentesisToString(double[] coeficientes){
        String p = "Polinômio interpolador de Newton (Forma com parêntesis aninhados): ";
        if (coeficientes[0] != 0) p += coeficientes[0];
        //} else {
            //p += "0";
        //    if (coeficientesDaClasse.length > 1) p += " + ";
        //}

        for (int c = 1; c < qntRealDeCoeficientes(coeficientes); c++) {
            if (coeficientes[c-1] != 0) p += " + ";
            p += xMenosXiSimplesToString(c-1);
            if (! (c == qntRealDeCoeficientes(coeficientes)-1 && coeficientes[c] == 1)) p += "*";
            if (c != qntRealDeCoeficientes(coeficientes)-1) p += "("; 
            if (coeficientes[c] != 0 && ! (c == qntRealDeCoeficientes(coeficientes)-1 && coeficientes[c] == 1) ) p += coeficientes[c];
        }
        for (int i = 0; i < qntRealDeCoeficientes(coeficientes)-2; i++) {
            p+= ")";
        }
        return p;
    }

    /**
     * Revela a string "(x - x[i])".
     * @param indice Índice do x.
     * @return A string com seus valores substituídos.
     */
    private String xMenosXiSimplesToString(int indice){
        String s = "";
            if (Double.valueOf(modeloDados.getValueAt(indice, 0).toString()) != 0) {
                s += "(x ";
                s += Double.valueOf(modeloDados.getValueAt(indice, 0).toString())>=0?"- ":"";
                s += modeloDados.getValueAt(indice, 0) + ")";
            }
            else s += "x";
        return s;
    }

    /**
     * Revela a quantidade "real" de coeficientes do polinômio de Newton.<br>
     * "Quantidade real", pois pode acontecer que os últimos coeficientes (de ordem maior) comecem a aparecer todos nulos, sendo irrelevantes para as contas, portanto.
     * @param coeficientes Coeficientes do polinômio de Newton.
     * @return Quantidade "real" de coeficientes do polinômio de Newton.
     */
    private int qntRealDeCoeficientes(double[] coeficientes){
        int qnt = coeficientes.length; //descobre quantos coeficientesDaClasse tem antes que eles comecem a ficar todos zero nas ultimas ordens
        
        for (int i = coeficientes.length-1; i >=0 ; i--) {
            if (coeficientes[i] == 0) qnt--;
            else break;
        }
        return qnt;
    }

    /**
     * Retorna os coeficientes a, b e c do polinômio de Newton de grau 2 que interpola 3 pontos a partir de um índice de um x.<br>
     * P(x) = ax² + bx + c.
     * @param indiceDoX0 Índice do primeiro x da tabela.
     * @return Coeficientes a, b e c do polinômio de Newton de grau 2 que interpola 3 pontos.
     */
    private double[] poliNewtonGrau2(int indiceDoX0){
        //P(x) = ax² + bx + c        

        double x0 = Double.valueOf(modeloDados.getValueAt(indiceDoX0, 0).toString());
        double x1 = Double.valueOf(modeloDados.getValueAt(indiceDoX0+1, 0).toString());
        double x2 = Double.valueOf(modeloDados.getValueAt(indiceDoX0+2, 0).toString());
        
        double y0 = Double.valueOf(modeloDados.getValueAt(indiceDoX0, 1).toString()); //y0 = f0
        double y1 = Double.valueOf(modeloDados.getValueAt(indiceDoX0+1, 1).toString());
        double y2 = Double.valueOf(modeloDados.getValueAt(indiceDoX0+2, 1).toString());
        
        if (x0 == x1 || x1 == x2 || x0 == x2){
            System.out.println("Erro: dois x iguais");
            JOptionPane.showMessageDialog(null, "Erro: dois x iguais", "Interpolador", JOptionPane.ERROR_MESSAGE);
        }
        
        double f0 = y0;
        double f1 = (y1-y0)/(x1-x0); /*acharDifDiv(indiceDoX0, 1);*/ double f2_1 = (y2-y1)/(x2-x1); // f2_1 é f[x2,x1]
        double f2 = (f2_1 - f1)/(x2-x0);//acharDifDiv(indiceDoX0, 2);
        //System.out.println("f0 = " + f0 + " f1 = " + f1 + " f2 = " + f2);

        double a = f2;
        double b = f1 - f2*x0 - f2*x1;
        double c = f0 - f1*x0 + f2*x0*x1;

        System.out.println("Polinômio parcial (grau 2): " + a + "x² + " + b + "x + " + c);
        jTextAreaResultados.setText(jTextAreaResultados.getText() + "\n\nPolinômio parcial (grau 2): " + a + "x² + " + b + "x + " + c);

        return new double[] {a,b,c};
    }

    /**
     * Retorna os coeficientes a, b e c do polinômio de Newton de grau 2 que interpola 3 pontos dados.<br>
     * P(x) = ax² + bx + c.
     * 
     * @param x0
     * @param x1
     * @param x2
     * @param coeficientes
     * @return Coeficientes a, b e c do polinômio de Newton de grau 2 que interpola 3 pontos.
     */
    private double[] poliNewtonGrau2(double x0, double x1, double x2, double[] coeficientes){
        //P(x) = ax² + bx + c        

        double y0 = acharFDeXComPolinomioDeNewton(x0, coeficientes); //y0 = f0
        double y1 = acharFDeXComPolinomioDeNewton(x1, coeficientes);
        double y2 = acharFDeXComPolinomioDeNewton(x2, coeficientes);

        if (x0 == x1 || x1 == x2 || x0 == x2){
            System.out.println("Erro: dois x iguais");
            JOptionPane.showMessageDialog(null, "Erro: dois x iguais", "Interpolador", JOptionPane.ERROR_MESSAGE);
        }

        
        double f0 = y0;
        double f1 = (y1-y0)/(x1-x0); /*acharDifDiv(indiceDoX0, 1);*/ double f2_1 = (y2-y1)/(x2-x1); // f2_1 é f[x2,x1]
        double f2 = (f2_1 - f1)/(x2-x0);//acharDifDiv(indiceDoX0, 2);
        //System.out.println("f0 = " + f0 + " f1 = " + f1 + " f2 = " + f2);

        double a = f2;
        double b = f1 - f2*x0 - f2*x1;
        double c = f0 - f1*x0 + f2*x0*x1;

        System.out.println("Polinômio parcial (grau 2): " + a + "x² + " + b + "x + " + c);
        jTextAreaResultados.setText(jTextAreaResultados.getText() + "\n\nPolinômio parcial (grau 2): " + a + "x² + " + b + "x + " + c);

        return new double[] {a,b,c};
    }

    /**
     * Retorna a área (obtida com integração) da equação de grau 2 (ax² + bx + c) de extremo1 até extremo2.<br>
     * A integral indefinida será (a/3)*x³ + (b/2)*x² + c*x (+ K irrelevante aqui).
     * 
     * @param abc Coeficientes da equação interpoladora de grau 2.
     * @param extremo1 Valor do primeiro x.
     * @param extremo2 Valor do segundo x.
     * @return Área.
     */
    private double integralGrau2(double[] abc, double extremo1, double extremo2){
        //retorna a área (obtida com integração) da equacao de grau 2 (ax² + bx + c) de extremo1 até extremo2
        //a integral indefinida será (a/3)*x³ + (b/2)*x² + c*x (+ K irrelevante aqui)

        //a = abc[0]
        //b = abc[1]
        //c = abc[2]
        double valorNoExtremo1 = (abc[0]/3d)*Math.pow(extremo1, 3) + (abc[1]/2d)*Math.pow(extremo1, 2) + abc[2]*extremo1;
        double valorNoExtremo2 = (abc[0]/3d)*Math.pow(extremo2, 3) + (abc[1]/2d)*Math.pow(extremo2, 2) + abc[2]*extremo2;

        double area = valorNoExtremo2 - valorNoExtremo1;
        
        System.out.println("Integral (grau 3): " + (abc[0]/3d) + "*x³ + " + (abc[1]/2d) + "*x² + " + abc[2] + "*x , área : " + area);
        jTextAreaResultados.setText(jTextAreaResultados.getText() + "\n\nIntegral (grau 3): " + (abc[0]/3d) + "*x³ + " + (abc[1]/2d) + "*x² + " + abc[2] + "*x , área : " + area);

        return area;
    }

    /**
     * Retorna a derivada em x da equação de grau 2 (ax² + bx + c) no ponto "x"<br>
     * A derivada será 2*a*x + b.
     * @param abc Coeficientes da equação de grau 2.
     * @param x Valor de x.
     * @return 
     */
    private double derivadaGrau2(double[] abc, double x){
        //retorna a derivada em x da equacao de grau 2 (ax² + bx + c) no ponto "x"
        //a derivada será 2*a*x + b
        
        //a = abc[0]
        //b = abc[1]
        //c = abc[2]

        System.out.println("Derivada: 2*" + abc[0] + "*x + " + abc[1]);
        jTextAreaResultados.setText(jTextAreaResultados.getText() + "\n\nDerivada: 2*" + abc[0] + "*x + " + abc[1]);

        return 2*abc[0]*x + abc[1];
    }

    /**
     * Obtém recursivamente o valor de uma diferença dividida de certo índice e certa ordem.<br>
     * "Índice" refere-se à posição vertical, e "ordem" à posição horizontal na cadeia de diferenças divididas.
     * @param indice Índice da diferença dividida.
     * @param ordem Ordem da diferença dividida.
     * @return 
     * @deprecated Método desnecessário e expendioso, construido apenas por curiosidade.
     */
    private double acharDifDiv(int indice, int ordem){
        //metodo desnecessario e expendioso, construido apenas por curiosidade
        double difDiv;
        switch (ordem) {
            case 0:
                //caso extremo, pega-se os proprios ys
                difDiv = Double.valueOf(modeloDados.getValueAt(indice, 1).toString());
                break;
            case 1:
                difDiv = (Double.valueOf(modeloDados.getValueAt(indice+1, 1).toString()) - Double.valueOf(modeloDados.getValueAt(indice, 1).toString()))
                        /(Double.valueOf(modeloDados.getValueAt(indice+1, 0).toString()) - Double.valueOf(modeloDados.getValueAt(indice, 0).toString()));
                break;
            default:
                //(difdiv[indice+1] - divdif[indice]) / (x[indice+ordem] - x[indice]);
                difDiv = (acharDifDiv(indice+1, ordem-1) - acharDifDiv(indice, ordem-1))/
                        (Double.valueOf(modeloDados.getValueAt(indice+ordem, 0).toString()) - Double.valueOf(modeloDados.getValueAt(indice, 0).toString()));
                break;
        }
        //System.out.println("difdiv i" + indice + " ordem " + ordem + " = " + difDiv);
        return difDiv;
    }
}